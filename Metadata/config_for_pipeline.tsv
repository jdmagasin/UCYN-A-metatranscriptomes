## This configuration file was generated by hand using the
## MicroTOOLs configuration file creator (via a web browser).
## Each of the seven stages of the MicroTOOLs pipeline has
## a section with relevant parameters.  However, note that
## some parameters, usually the ones less frequently customized,
## are available instead as parameters to the main pipeline
## functions.


################################## stage0 ##################################

## Top level output directory
outputDir	Output

## Table (tsv file) that gives the filenames of the raw microarray data
## files and some associated metadata.  Column names are flexible, except
## that some are required (*) and some are used if available (+):
##     * FileName Path to a text file (format?) with raw probe values
##     * SampleID The sample with which the array is associated.
##     + Barcode  This field and Slide and Array are used to form an array
##                identifier for plots that compare arrays.  The format of
##                the identifier can be [barcode]_[slide]_[array], or use
##                whichever of the fields are available.
##     + Slide
##     + Array
## 
microarrayInfo	Metadata/aloha_ucyna_arrays.tsv

## Table (tsv file) with whatever metadata you like for each sample.  The
## first line must be a header that names the columns, and the first column
## should uniquely identify an array/sample, for example it might be "Sample
## ID".  Other columns can name the Experiment, provide a short Description,
## list various measurements useful for interpreting expression patterns,
## etc.  Comment lines begin with #.
sampleMetaData	Metadata/aloha_ucyna_samples.tsv

## Table (tsv file) that describes the columns in the sampleMetaData file.
## Each row in this file describes a column in the sampleMetaData file,
## formatted as follows (without the leading spaces shown here for
## readability):
##     [column label] [tab] [description]
## For example, if there is a column named Organization, then this file
## might have the line:
##     Organization [tab] Institution affiliated with the sample
## There is no header line in this file.  Comment lines begin with #.
sampleLabelsDesc	Metadata/aloha_ucyna_samples.labels.tsv


################################## stage1 ##################################

## Optionally give a comma-separated list of probe types to include in
## QC plots.  For example one might want separate QC plots for
## experimental, negative control, positive control, and bright corner
## probes.  Suppose these probe types are designated in the raw array file
## (fixme: how?)  with values 0, 66, 1028, and 260 respectively.  Then one
## can define this setting as: 0,66,1028,260 Any character strings that do
## not have commas will work.
probeSubTypesForQCPlots	0,66,1028,260

## There should be a SubTypeMask column in the raw array data files that
## indicates probe types.  Set this parameter to the value (string) that
## appears in that column to indicate experimental probes.
## Non-experimental probes will be removed just before probe normalization.
## If you have ERCC probes, they should be experimental so that they will
## be retained for ERCC-based normalization.  Similarly you can decide
## whether to retain control probes in order to see quality control plots
## of their estimated gene levels at the probe-to-gene conversion stage.
experimentalProbeSubType	0

## Optionally request histograms for probe values of the specified type.
## Probe types are as described for probeSubTypesForQCPlots; you probably
## want to set this to whatever probe type is experimental.  The histograms
## group the probes by *experiment*.  There must be an Experiment
## column in the array data files.
probeSubTypeForHistograms	0

## Optionally request nonmetric multidimensional scaling plots for
## probes of the specified type.  Probe types are as described for
## probeSubTypesForQCPlots; you probably want to set this to whatever probe
## type is experimental.  The plots produced group the probes by
## *sample* -- or whatever you use in the first column of the
## sampleMetaData file.
probeSubTypeForMDS	0

## Optional: Only do nonmetric multidimensional scaling plots for
## samples from the specified Organization (fixme: as defined...).
## This only is used if probeSubTypeForMDS is also defined.
#organizationForMDS	


################################## stage2 ##################################


################################## stage3 ##################################

## Table that describes each of the genes targetted by the MicroTOOLs array.
## This includes columns with taxonomic and sequence information as well as
## reference database accessions (NCBI GIs for example) and even habitat data.
## FIXME: Currently a csv; change to tsv.  What columns will always be there?
MicroTOOLsArrayDesign	Platform/platformA1A2A3.tsv.gz

## Each line of this file gives the name and a description of the columns in
## the table specified by the MicroTOOLsArrayDesign parameter.
MicroTOOLsArrayDesignLabelsDesc	Platform/platformA1A2A3.labels.tsv.gz


################################## stage4 ##################################

## <p>Table (.tsv) of ERCC spike-in transcripts.  Rows should begin with
## the name of the ERCC spike-in.  The only required columns are "Name"
## in the first column, and "Transcripts" which is the number of mRNA
## transcripts pipetted into the sample, for each ERCC sequence.  So a
## minimal table would look like, for example:
##     Name         Transcripts
##     ERCC-00002   4.516606e+07
##     ERCC-00003   2.822879e+06
##     ...
## 
## Transcripts may be given in scientific notation or whole numbers.
#erccMetadata	

## Include at least this fraction of the ERCC gene concentrations when
## making linear models for ERCC-based normalization.  ERCC normalization
## entails building a linear model between known spike-in ERCC
## transcripts and their observed intensity levels.  Linear models will
## tend to work well for the "middle" range of spike-ins.  Low- and
## high-concentration spike-ins have issues due to noise and signal
## saturation, respectively.  The fourth stage of the pipeline trims off
## ERCC genes at low and high concentrations to make a better linear
## model (using a simple greedy algorithm).  One does not want to throw
## out too many concentrations; this parameter specifies the lower
## bound. The default, 0.75, retains at least three quarters of the
## concentrations.  Note that the algorithm keeps the model with highest
## R-squared for each sample, and the number of ERCC spike-ins can differ
## across samples.
#minERCC	

## During sample preparation, equal total ERCC transcripts should have
## been added to each sample (probably before amplifying cDNA).  This may
## have required different ERCC volumes for each sample because the
## amount of ERCC transcripts to add depends on the total RNA in the
## sample. If so, then after ERCC normalization, you probably will want
## to correct for this by dividing each sample's inferred transcript
## count by the volume of sample used.  To do this set this parameter to
## the name of the column in the sampleMetaData table that gives the
## scaling factor (i.e. the volume most likely) for each sample.
#postERCCscalingColumn	


################################## stage5 ##################################

## String that describes genes that should be excluded when detecting
## differentially expressed genes.  Usually this means ERCC genes, and
## so setting this parameter to "ERCC" will exclude genes with "ERCC"
## in their gene name or gene identifier.
excludeGenesString	ERCC; Negative control; Positive control


################################## stage6 ##################################

## Name of the field in the sampleMetadata file (stage 0 parameter)
## that describes the category of each sample.  Samples from the
## same category are treated as replicates during the creation of
## gene linear models (by LIMMA); so if an array has no replicates
## be sure to give it a unique category.  Sample categories are also
## used for clustering and associated plots.
sampleCategoryFieldName	DayPart

## This parameter lists pairs of sample categories that you want to
## compare during cluster analysis.  For example if the sample
## categories are "experiment_A", "control_A", "experimental_B",
## and "control_B", then you could define this field as:
##     experimental_A, control_A; experimental_B, control_B
## 
##  * Cluster plots will report differential expression of the first
##     item in a pair versus the second.  You probably want to name
##     experiments before controls (as above) or your plots will appear
##     flipped.
##   * Categories may appear in more than one comparison.
##   * Category names should not have commas or semicolons.  They should
##     be valid names for R variables.  If your category names begin with
##     a letter followed by only alphanumeric characters, "_" and ".",
##     then you will be fine.  (Reserved words in R should not be used but
##     it is not likely that you would pick them as category names.)
## 
##See also the sampleCategoryFieldName parameter.
#sampleCategoryComparisons	Surf_FDW, Surf_Cnt; Surf_UDW, Surf_FDW; Deep_FSW, Deep_Cnt
sampleCategoryComparisons	sunset, morning; noon, morning; afternoon, morning; sunrise, morning

## The number of top differentially expressed genes to report and label
## in plots.  Default=10.
numGenesToHighlight	10


################################## stage7 ##################################

## A comma-separated list of names of numeric measurements taken
## with each sample.  These are column names for the table specified
## in the sampleMetaData parameter (stage 0).  Currently
## phenosWanted is only used to make a heatmap of the correlations
## between the named measurements (e.g. nutrient concentrations) and
## the WGCNA module expression patterns.
#phenosWanted	


